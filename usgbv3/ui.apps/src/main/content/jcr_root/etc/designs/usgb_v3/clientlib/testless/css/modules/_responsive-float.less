// ----------------------------------------------------------------------
// Responsive Floats
// output: float-{float-values},
// output: float-{float-bp}-{float-values},
// ----------------------------------------------------------------------

@float-values: left, right;
@float-bp: xs @min-bp-xs, sm @min-bp-sm, md @min-bp-md, lg @min-bp-lg;

// class name constructor
.function-float-class(@val, @bp:null) {
  & when ((@bp != null)) {
    return: float-extract(@bp, 1)-@{val}
  }
& when not ((@bp != null)) {
    return: float-@{val}
  }
}

// class wrapper constructor
.float-style(@value, @bp: null) {
  .float-class(@value, @bp) {
    @if(@bp == null) {
      float: @value;
    }
    @else {
      .min-breakpoint(extract(@bp, 2)) {
        float: @value;
      }
    }
  }
}

// float-values loop
.loop-float-values(@bp: null) {
  @each @value in @float-values {
    .float-style(@value, @bp);
  }
}

// generate classes without breakpoints
.loop-float-values();

// with breakpoints
@each @bp in @float-bp {
  .loop-float-values(@bp);
}
