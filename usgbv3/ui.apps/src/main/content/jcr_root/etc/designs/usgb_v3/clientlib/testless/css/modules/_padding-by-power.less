// ----------------------------------------------------------------------
// Padding By Power
// output: p-{padding-sizes},
//         p-sm-{padding-sizes},
//         p-md-{padding-sizes},
//         p-side-{padding-sizes},
//         p-sm-side-{padding-sizes},
//         p-md-side-{padding-sizes},
//         p-vertical-{padding-sizes},
//         p-sm-vertical-{padding-sizes},
//         p-md-vertical-{padding-sizes},
//         p-left-{padding-sizes},
//         p-sm-left-{padding-sizes},
//         p-md-left-{padding-sizes},
//         p-right-{padding-sizes},
//         p-sm-right-{padding-sizes},
//         p-md-right-{padding-sizes},
//         p-top-{padding-sizes},
//         p-sm-top-{padding-sizes},
//         p-md-top-{padding-sizes},
//         p-bottom-{padding-sizes},
//         p-sm-bottom-{padding-sizes},
//         p-md-bottom-{padding-sizes},
// ----------------------------------------------------------------------



// ----------------------------------------------------------------------
// Power Function
// ----------------------------------------------------------------------
@import './sass-math-pow/sass/math-pow';



@padding-sizes: (no, xxs, xs, s, m, l, xl, xxl, 3xl, 4xl, 5xl);


// ----------------------------------------------------------------------
// Base Multipliers
// ----------------------------------------------------------------------
@base-multiplier-map : ( no:0, xxs:4 , xs:8, s:10, m:15, l:20, xl:25, xxl:30, 3xl:35, 4xl:40, 5xl:60);



// ----------------------------------------------------------------------
// Breakpoints Power
// ----------------------------------------------------------------------
@breakpoint-power-map : (xs: 1, sm:1, md:1);


.function-padding-value(@base, @power) {
    return: poly-pow(@base, @power)px;
}


.padding-content(@class-prefix, @size) {
  & when ((@class-prefix = p)) {
    padding: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
  }
& when not ((@class-prefix = p)) if (@class-prefix == p-sm) {
    .min-breakpoint(@min-bp-sm) {
      padding: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
    }
  } @else if (@class-prefix == p-md) {
    .min-breakpoint(@min-bp-md) {
      padding: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
    }
  } @else if (@class-prefix == p-side) {
    padding: {
      left: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
      right: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
    }
  } @else if (@class-prefix == p-sm-side) {
    .min-breakpoint(@min-bp-sm) {
      padding: {
        left: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
        right: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
      }
    }
  } @else if (@class-prefix == p-md-side) {
    .min-breakpoint(@min-bp-md) {
      padding: {
        left: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
        right: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
      }
    }
  } @else if (@class-prefix == p-vertical) {
    padding: {
      top: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
      bottom: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
    }
  } @else if (@class-prefix == p-sm-vertical) {
    .min-breakpoint(@min-bp-sm) {
      padding: {
        top: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
        bottom: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
      }
    }
  } @else if (@class-prefix == p-md-vertical) {
    .min-breakpoint(@min-bp-md) {
      padding: {
        top: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
        bottom: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
      }
    }
  } @else if (@class-prefix == p-left) {
    padding-left: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
  } @else if (@class-prefix == p-sm-left) {
    .min-breakpoint(@min-bp-sm) {
      padding-left: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
    }
  } @else if (@class-prefix == p-md-left) {
    .min-breakpoint(@min-bp-md) {
      padding-left: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
    }
  } @else if (@class-prefix == p-right) {
    padding-right: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
  } @else if (@class-prefix == p-sm-right) {
    .min-breakpoint(@min-bp-sm) {
      padding-right: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
    }
  } @else if (@class-prefix == p-md-right) {
    .min-breakpoint(@min-bp-md) {
      padding-right: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
    }
  } @else if (@class-prefix == p-top) {
    padding-top: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
  } @else if (@class-prefix == p-sm-top) {
    .min-breakpoint(@min-bp-sm) {
      padding-top: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
    }
  } @else if (@class-prefix == p-md-top) {
    .min-breakpoint(@min-bp-md) {
      padding-top: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
    }
  } @else if (@class-prefix == p-bottom) {
    padding-bottom: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, xs));
  } @else if (@class-prefix == p-sm-bottom) {
    .min-breakpoint(@min-bp-sm) {
      padding-bottom: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, sm));
    }
  } @else if (@class-prefix == p-md-bottom) {
    .min-breakpoint(@min-bp-md) {
      padding-bottom: padding-value(map-get(@base-multiplier-map, @size), map-get(@breakpoint-power-map, md));
    }
  }
}


.loop-padding(@class-prefix) {
  @each @size in @padding-sizes {
    .@{class-prefix}-@{size} {
      .padding-content(@class-prefix, @size);
    }
  }
}

.loop-padding(p);
.loop-padding(p-sm);
.loop-padding(p-md);

.loop-padding(p-side);
.loop-padding(p-sm-side);
.loop-padding(p-md-side);

.loop-padding(p-vertical);
.loop-padding(p-sm-vertical);
.loop-padding(p-md-vertical);

.loop-padding(p-left);
.loop-padding(p-sm-left);
.loop-padding(p-md-left);

.loop-padding(p-right);
.loop-padding(p-sm-right);
.loop-padding(p-md-right);

.loop-padding(p-top);
.loop-padding(p-sm-top);
.loop-padding(p-md-top);

.loop-padding(p-bottom);
.loop-padding(p-sm-bottom);
.loop-padding(p-md-bottom);


// ----------------------------------------------------------------------
// Classes for Toggle Padding for each Breakpoint
// ----------------------------------------------------------------------

@media only screen and (max-width: @bp-sm + px ) and (min-width: @min-bp-xxs + px){
  .p-no-xs-only{
    padding: 0;
  }
}

@media only screen and (max-width: @bp-md + px) and (min-width: @min-bp-sm + px){
  .p-no-sm-only{
    padding: 0;
  }
}

@media only screen and (min-width: @min-bp-md + px){
  .p-no-md-only{
    padding: 0;
  }
}
